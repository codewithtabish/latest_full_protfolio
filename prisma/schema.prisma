// Comment Model

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id        String   @id @default(uuid())
  content   String // Content of the comment
  userId    String // Reference to the User who made the comment
  blogId    String? // Reference to the Blog the comment is associated with (optional for flexibility)
  projectId String? // Reference to the Project the comment is associated with (optional for flexibility)
  user      User     @relation(fields: [userId], references: [id]) // Relate to User model
  blog      Blog?    @relation(fields: [blogId], references: [id]) // Relate to Blog model (optional)
  project   Project? @relation(fields: [projectId], references: [id]) // Relate to Project model (optional)
  createdAt DateTime @default(now()) // Timestamp for when the comment was created
}

// Blog Model
model Blog {
  id              String               @id @default(uuid())
  title           String
  content         Json // Now content is a reference to the BlogContent model
  blogTopImage    String
  userId          String
  user            User                 @relation(fields: [userId], references: [id])
  views           Int                  @default(0)
  likes           Int                  @default(0)
  status          BlogStatus           @default(PENDING) // Status of the blog (pending, approved, rejected)
  published       Boolean              @default(false) // Track whether the blog is published
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  comments        Comment[] // One-to-many relationship with Comment
  likesList       BlogLike[] // One-to-many relationship with Like
  viewsArray      BlogViews[] // Track views for each user (views array)
  recommendations BlogRecommendation[] // User blog recommendations
}

// Project Model
model Project {
  id              String        @id @default(uuid())
  name            String
  description     String
  userId          String
  likes           Int
  projectTopImage String
  user            User          @relation(fields: [userId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  likesList       ProjectLike[] // Track who liked the project
  comments        Comment[] // One-to-many relationship with CommentZZ
  videoUrl        String
  githubUrl       String
  demoUrl         String
  liveWebUrl      String?
  techStacks      Json
  // String[] // Array of strings to hold technologies

  ProjectRecommendation ProjectRecommendation[]
}

// BlogContent Model
model BlogContent {
  id        String   @id @default(uuid())
  blogId    String
  content   Json // Store rich content (text, images, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // blog      Blog     @relation(fields: [blogId], references: [id])
}

// Blog Views Model (tracks views per user for a particular blog)
model BlogViews {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  views     Int      @default(1) // Number of views by a specific user for this blog
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now()) // Timestamp when the view was recorded
}

// Enum for Blog Status (PENDING, APPROVED, REJECTED)
enum BlogStatus {
  PENDING // Blog submitted by user, waiting for admin approval
  APPROVED // Blog approved by admin
  REJECTED // Blog rejected by admin
}

// BlogLike Model
model BlogLike {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now()) // Track when the like was made
}

// ProjectLike Model
model ProjectLike {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now()) // Track when the like was made
}

// Tech Stack Model
// model TechStack {
//   id        String   @id @default(uuid())
//   name      String // Name of the technology (e.g., React, Node.js)
//   projectId String
//   project   Project  @relation(fields: [projectId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String?
//   user      User?    @relation(fields: [userId], references: [id])
// }

// ProjectRecommendation Model
model ProjectRecommendation {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}

// BlogRecommendation Model
model BlogRecommendation {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
}

// User Model
model User {
  id                     String                  @id @default(uuid())
  name                   String
  email                  String
  profilePicture         String?
  isAdmin                Boolean                 @default(false) // Field to define if the user is an admin
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  blogs                  Blog[] // One-to-many relationship with Blog
  courses                Course[] // One-to-many relationship with Course
  notifications          Notification[] // One-to-many relationship with Notifications
  projects               Project[] // One-to-many relationship with Project
  // techStacks             TechStack[] // One-to-many relationship with TechStack
  blogRecommendations    BlogRecommendation[] // Recommendations based on blogs
  projectRecommendations ProjectRecommendation[] // Recommendations based on projects
  Comment                Comment[]
  BlogViews              BlogViews[]
  BlogLike               BlogLike[]
  ProjectLike            ProjectLike[]
}

// Notification Model
model Notification {
  id        String           @id @default(uuid())
  userId    String
  content   String // Message content of the notification
  type      NotificationType // Type of the notification
  isRead    Boolean          @default(false) // Status of whether the user has read it
  user      User             @relation(fields: [userId], references: [id])
  createdAt DateTime         @default(now()) // Timestamp for when the notification is created
}

// Enum for Notification Types
enum NotificationType {
  BLOG_APPROVAL // Notification when a blog is approved by admin
  BLOG_REJECTION // Notification when a blog is rejected by admin
  NEW_COMMENT // Notification when there is a new comment on the user's blog
  NEW_LIKE // Notification when the user's blog receives a like
  NEW_PROJECT_LIKE // Notification when a project receives a like
}

model Course {
  id          String   @id @default(uuid()) // Unique ID for each course
  title       String // The title of the course
  description String // The description of the course
  userId      String // Reference to the User who owns the course
  user        User     @relation(fields: [userId], references: [id]) // Relation to the User model
  createdAt   DateTime @default(now()) // Timestamp for when the course was created
  updatedAt   DateTime @updatedAt // Automatically updated timestamp
}
